name: 'Application'

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  deploy:
    name: "Deploy App"
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY_BASTION }}" > ~/.ssh/bastion.pem
          chmod 600 ~/.ssh/bastion.pem
          cat >>~/.ssh/config <<END
          Host bastion
            HostName "${{ secrets.SSH_HOST_BASTION }}"
            User "${{ secrets.SSH_USER_BASTION }}"
            IdentityFile ~/.ssh/bastion.pem
            StrictHostKeyChecking no
          END
        env:
          SSH_USER_BASTION: "${{ secrets.SSH_USER_BASTION }}"
          SSH_KEY_BASTION: "${{ secrets.SSH_KEY_BASTION }}"
          SSH_HOST_BASTION: "${{ secrets.SSH_HOST_BASTION }}"

      - name: Deploy
        run: |
          ssh bastion 'echo "${{ secrets.SSH_KEY_DOCKER_SERVER }}" > ~/.ssh/docker.pem;chmod 600 ~/.ssh/docker.pem'
          ssh bastion 'ssh -i ~/.ssh/docker.pem ubuntu@"${{ secrets.SSH_HOST_DOCKER_SERVER }}" "git clone https://github.com/ga905049/Teste-App.git; cd Teste-App/; docker stop $(docker ps -a -q); docker build -t teste-backend -f Dockerfile.backend ./backend; docker build -t teste-frontend -f Dockerfile.frontend ./frontend; docker run -d -p5500:5500 teste-backend;docker run -d -p3000:3000 teste-frontend"'
          ssh bastion 'ssh -i ~/.ssh/docker.pem ubuntu@"${{ secrets.SSH_HOST_DOCKER_SERVER }}" "curl -s -o /dev/null -I -w "%{http_code}" localhost:3000"'
          
      - name: Test App
        run: |
          ssh bastion 'echo "${{ secrets.SSH_KEY_DOCKER_SERVER }}" > ~/.ssh/docker.pem;chmod 600 ~/.ssh/docker.pem'
          ssh bastion 'ssh -i ~/.ssh/docker.pem ubuntu@"${{ secrets.SSH_HOST_DOCKER_SERVER }}" "if [ `curl -s -o /dev/null -I -w "%{http_code}" localhost:3000` -eq 200 ]; then echo 'App funcionando'; else echo 'App com problemas' exit 1; fi"'